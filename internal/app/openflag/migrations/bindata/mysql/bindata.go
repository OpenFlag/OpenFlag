// Code generated by go-bindata.
// sources:
// 20200704133101_init.down.sql
// 20200704133101_init.up.sql
// DO NOT EDIT!

package mysql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __20200704133101_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x29\xca\x2f\x50\x28\x49\x4c\xca\x49\x55\xc8\x4c\x53\x48\xad\xc8\x2c\x2e\x29\x56\x48\xcb\x49\x4c\x2f\xb6\xe6\x02\x04\x00\x00\xff\xff\x51\x0c\x2c\x11\x1c\x00\x00\x00")

func _20200704133101_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__20200704133101_initDownSql,
		"20200704133101_init.down.sql",
	)
}

func _20200704133101_initDownSql() (*asset, error) {
	bytes, err := _20200704133101_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20200704133101_init.down.sql", size: 28, mode: os.FileMode(420), modTime: time.Unix(1604830260, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __20200704133101_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\x41\x6e\xb4\x30\x0c\x85\xf7\x39\x85\x97\x44\xfa\x67\xf3\x4b\xb3\xe2\x30\xc8\x43\x0c\x75\x1b\x1c\x94\x98\x96\xb9\x7d\x95\xc9\x8c\x42\x2a\x5a\x16\x91\x78\xfe\x9e\xfd\xec\x31\x12\x2a\x81\xe2\xcd\x13\xf0\x04\x12\x14\x68\xe7\xa4\x09\x26\x8f\x73\x32\x9d\x01\x00\x60\x07\xcd\x77\xe3\x99\x45\x5f\x7f\xb8\x69\x18\x58\xc6\x48\x0b\x89\xc2\x1a\x79\xc1\x78\x87\x0f\xba\xff\x7b\xb8\x15\xe7\x74\x74\xbf\xa7\x20\xa5\xe2\x28\x8d\x91\x57\xe5\x20\x8f\x8a\xd2\xae\x95\xcb\x61\x64\xf3\xbe\xb0\x39\xcf\xb1\xcb\x27\xc6\xf1\x0d\x63\xf7\xff\x7a\xb5\x3f\xd9\x44\x73\x8e\x92\x8e\x13\x7f\xeb\x5b\x4e\xe0\x06\x7c\x4e\x56\x5e\x28\x29\x2e\x6b\xc3\x82\xa3\x09\x37\xaf\x20\xe1\xab\xb3\xaf\xf4\x9e\xfe\x70\x6e\xde\x1b\xdb\x1b\x73\xb9\x3c\x67\x00\x8b\xa3\xbd\x1c\x76\xc8\x47\x19\xd8\xed\x10\xa4\x28\x5d\x56\x6c\x6f\x4e\xd8\xfc\xb6\x6c\x7e\xcf\xd9\xba\x4e\xeb\xa8\xfa\xb9\xaf\x2e\xd3\xfa\xaa\x6e\x7b\xf3\x1d\x00\x00\xff\xff\x3c\x9a\xd9\x53\x2f\x02\x00\x00")

func _20200704133101_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__20200704133101_initUpSql,
		"20200704133101_init.up.sql",
	)
}

func _20200704133101_initUpSql() (*asset, error) {
	bytes, err := _20200704133101_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "20200704133101_init.up.sql", size: 559, mode: os.FileMode(420), modTime: time.Unix(1604912361, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"20200704133101_init.down.sql": _20200704133101_initDownSql,
	"20200704133101_init.up.sql":   _20200704133101_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"20200704133101_init.down.sql": {_20200704133101_initDownSql, map[string]*bintree{}},
	"20200704133101_init.up.sql":   {_20200704133101_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
